// Minimal anime-like helper for simple animations used by the app.
function anime(opts){
  const el = (typeof opts.targets === 'string') ? document.querySelector(opts.targets) : opts.targets;
  const duration = opts.duration || 400;
  const delay = opts.delay || 0;
  const translateY = opts.translateY;
  const opacity = ('opacity' in opts) ? opts.opacity : null;
  const scale = ('scale' in opts) ? opts.scale : null;
  const easing = opts.easing || 'linear';
  const start = performance.now() + delay;
  return new Promise(resolve=>{
    function tick(now){
      const t = Math.max(0, Math.min(1, (now - start)/duration));
      let eased = t;
      if(easing==='easeOutQuad') eased = 1 - (1-t)*(1-t);
      if(el){
        if(translateY!==undefined) el.style.transform = `translateY(${(1-eased)*translateY}px)` + (scale ? ` scale(${1 - (1-eased)*(1-scale)})` : '');
        if(opacity!==null && opacity!==undefined) el.style.opacity = (1-eased)*(1 - (opacity-0)) + (opacity*eased);
        if(scale!==null && scale!==undefined && translateY===undefined) el.style.transform = `scale(${1 - (1-eased)*(1-scale)})`;
      }
      if(t < 1){
        requestAnimationFrame(tick);
      } else {
        if(opts.complete) try{opts.complete();}catch(e){}
        resolve();
      }
    }
    requestAnimationFrame(tick);
  });
}
